---
features:
  - Implemented a new framework for MuranoPL contracts. Now, instead of several
    independent implementations of the same YAQL methods (``string()``, ``class()``
    and others) all implementations of the same method are combined into a single
    class. Therefore, we now have a class per contract method. This also simplifies
    the development of new contracts. Each such class can provide methods for
    data transformation (default contract usage), validation that is used
    to decide if the method can be considered an extension method for the
    value, and JSON schema generation method that was moved from the schema
    generator script.
  - Previously, when a class overrode a property from its parent
    class the value was stored separately for both of them, transformed
    by each of the contracts. Thus each class accessed the value of its contract.
    In absolute majority of the cases, the observed value was the same. However,
    if the contracts were compatible on the provided value (say int() and
    string() contracts on the value "123"), they were different. This is
    considered to be a bad pattern.
    Now, the value is stored only once per object and transformed by the
    contract defined in the actual object, type. All base contracts are used
    to validate the transformed object thus this pattern will not work
    anymore.
  - The value that is stored in the object's properties is obtained by
    executing a special ``finalize`` contract implementation that, by default
    returns the input value unmodified. Because validation happens on
    the transformed value before it gets finalized,
    the transformation can return a value that will pass the validation, though the final value will not.
    This is used to relax the ``template()`` contract
    limitation that prevented child class from excluding additional properties
    from the template.
  - The ``string()`` contract no longer converts everything to string values.
    Now, it only converts scalar values to strings.
    Previous behavior allowed the ``string()`` property to
    accept lists and convert them to their Python string representation, which
    is clearly not what developers expected.
  - Due to refactoring, contracts work a little bit faster because there is
    no more need to generate YAQL function definition for each contract method
    on each call.
